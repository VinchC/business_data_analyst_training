# (a) Importer les packages pandas et numpy sous leurs alias usuels.
# (b) Charger dans un DataFrame nomm√© df les donn√©es contenues dans le fichier 'heart.csv'.
# (c) Afficher les 5 premi√®res lignes de df.

import pandas as pd
import numpy as np

df = pd.read_csv("heart.csv")
df.head()

# (d) Afficher les valeurs uniques prises par les colonnes "tension" et "sex". Pour cela on pourra utiliser la m√©thode unique des Series pandas. Ces deux r√©sultats constituent deux s√©ries statistiques (quantitative et qualitative respectivement).

# S√©rie statistique quantitative : 
print("Valeurs possibles de la colonne tension :", df["tension"].unique())
print("--------------------------------------------------------")

# S√©rie statistique qualitative : 
print("Valeurs possibles de la colonne sex :", df["sex"].unique())

# (e) Afficher un sommaire du DataFrame df cr√©√© pr√©c√©demment. Combien de variables sont de type non-num√©rique? De quel type s'agit-il?

df.info()

# (f) Utiliser l'attribut dtypes et la m√©thode value_counts pour compter le nombre de variables de chaque type pr√©sent dans le DataFrame df. Ce type d'inspection est tr√®s commun lorsque l'on manipule de grandes bases de donn√©es.

df.dtypes
df.dtypes.value_counts()

# (g) Pour la colonne "cholesterol" retrouver la valeur minimale, maximale, la m√©diane et les quartiles de cette variable en appliquant les m√©thodes appropri√©es.

print("La valeur minimale est : ", df['cholesterol'].min())
print("La valeur maximale est : ", df['cholesterol'].max())
print("La valeur m√©diane est : ", df['cholesterol'].median(), '\n')

q1, q2, q3 = df['cholesterol'].quantile(q=[0.25, 0.5, 0.75])

print("Les quartiles sont:", "q1 =", q1, ", q2 =", q2, ", q3 =", q3, '\n')

# (h) Calculer l'√©tendue de l'intervalle interquartile et d√©terminer les seuils √† partir desquels on consid√®rera une valeur comme √©tant extr√™me.
# (i) √Ä partir de ces seuils, filtrer le DataFrame df pour identifier tous les individus dont le taux de cholest√©rol est une valeur extr√™me. Quels taux sont des valeurs aberrantes? (On suppose qu'un humain peut avoir un taux jusqu'√† environ 600 mg/dL, mais ne peut pas avoir un taux nul).

## Valeurs extr√™mes :
# calcul de seuils :
etendue = q3-q1
seuil_min = q1 - 1.5*etendue
seuil_max = q3 + 1.5*etendue

print(etendue)

print("Les valeurs extr√™mes sont toutes les valeurs inf√©rieures √†", seuil_min,
      "et toutes les valeurs sup√©rieures √†", seuil_max)

# conclusions :
print("""
‚Ä¢ Les individus dont le taux de cholesterol est sup√©rieur √† l'intervalle 
interquartile ont des valeurs r√©alistes. \033[1mCe ne sont pas des valeurs aberrantes. \033[0m""")
display(df.loc[df['cholesterol'] > seuil_max])


print("""
‚Ä¢ Les individus dont le taux de cholesterol est inf√©rieur √† l'intervalle 
interquartile ont tous des taux de cholesterol nuls, ce qui est impossible. 
\033[1mCe sont donc des valeurs aberrantes.\033[0m
""")
display(df.loc[df['cholesterol'] < seuil_min])

# (j) Calculer la moyenne de la colonne "cholesterol".
# (k) Comparer cette moyenne √† la m√©diane de la colonne. Comment pourrions-nous expliquer cette diff√©rence?

# calcul "√† la main" : 
X = df["cholesterol"]
n = len(X) # taille de l'√©chantillon
moyenne_X = (1/n)*np.sum(X)
print("Moyenne calcul√©e '√† la main': ", moyenne_X)

# commande rapide en python : 
moyenne_X2 = df["cholesterol"].mean()
print("Moyenne calcul√©e avec la commande python: ", moyenne_X2)
print("\n")

# moyenne versus m√©diane : 
print("La m√©diane  est √©gale √† ", q2, " et elle est sup√©rieure √† la moyenne.")

print('''
La moyenne est influenc√©e par les valeurs extr√™mes. 
Elle est inf√©rieure √† la m√©diane, parce qu'on a beaucoup de valeurs extr√™mes petites 
(172 valeurs √©gales √† 0 contre 11 valeurs sup√©rieures √† {}) qui "tirent" la moyenne vers le bas.
'''.format(seuil_max))

# Import de la librairie seaborn sous l'alias sns
import seaborn as sns

# Tra√ßage d'un boxplot √† partir des valeurs de la colonne "cholesterol"
sns.boxplot(x=df['cholesterol'])

# (m) Comme avant, calculer "√† la main" l'√©cart-type de la colonne "cholesterol" et puis √† l'aide de la m√©thode std.
# calcul √† la main : 
X = df["cholesterol"]
n = len(X) # taille de l'√©chantillon
std_X = np.sqrt((1/(n-1))*sum((X-moyenne_X)**2))
print("√âcart-type calcul√© '√† la main': ", std_X )

# commande rapide en python : 
std_X2 = df["cholesterol"].std()
print("√âcart-type calcul√© avec la commande python: ", std_X2)

# (n) Pour avoir les valeurs de tous ces indicateurs pour chaque colonne num√©rique du Dataframe, on peut utiliser directement la m√©thode describe de pandas.DataFrame.
df.describe()

# (o) Simuler 100 tirages (√† sp√©cifier dans le param√®tre size) issus d'une loi normale centr√©e (√† sp√©cifier dans le param√®tre loc) et r√©duite (√† sp√©cifier dans le param√®tre scale).
mu, sigma = 0, 1
loi_cr = np.random.normal(loc = mu, scale = sigma, size = 100)

# (p) √Ä l'aide de la commande .histplot() de la librairie seaborn, afficher l'histogramme de cette variable. Si vous re-ex√©cutez la cellule vous allez obtenir un histogramme diff√©rent parce que vos donn√©es ont √©t√© re-g√©n√©r√©es.
sns.histplot(loi_cr)

# (q) Refaire la m√™me question, en augmentant la taille de l'√©chantillon √† 10000 et en sp√©cifiant un nombre entier pour la valeur de seed avant de g√©n√©rer vos donn√©es. Maintenant votre exp√©rience est reproductible, si vous re-ex√©cuter la cellule vous allez obtenir la m√™me distribution.
print("On observe que plus on a de donn√©es issues d'une loi normale," + "\n" +
    "plus l'histogramme s'approche de la loi de probabilit√© d'une loi normale th√©orique.")

np.random.seed(15)
loi_cr = np.random.normal(mu, sigma, 10000)
sns.histplot(loi_cr)

# (r) G√©n√©rer un √©chantillon ech de 100 donn√©es issu d'une loi normale avec ùúá=12 et ùúé=3.
# (s) Importer statsmodels.api sous l'alias sm et appliquer la fonction qqplot de la librairie statsmodels.api √† ech en sp√©cifiant le param√®tre line = '45' et en normalisant les donn√©es.
import statsmodels.api as sm

ech = np.random.normal(12, 3, 100)
sm.qqplot(ech, fit = True, line = '45')
# on remarque que si on enl√®ve le param√®tre fit = True, on n'observe pas de similarit√©s entre ech et une loi normale centr√©e et r√©duite et c'est normal car ech a √©t√© g√©n√©r√©e par une loi normale de moyenne 12 et √©cart-type 3

# (t) √Ä l'aide de la m√©thode select_dtypes selectionner uniquement les colonnes num√©riques (int ou float) du df dans un nouveau Dataframe var_num.
var_num = df.select_dtypes(include = ['int', 'float'])
var_num

# (u) Pour identifier les colonnes du DataFrame df qui s'approchent d'une loi normale, afficher un Q-Q plot pour chaque colonne num√©rique √† l'aide d'une boucle et d√©terminer les colonnes qui semblent suivre une loi normale.
# Boucle qui permet d'afficher les Q-Q plots: 
for column in var_num.columns:
    print(column)
    sm.qqplot(var_num[column], line='45', fit = True)

# Les variables age et freq_card_max semblent suivre des lois normales

# (v) Calculer la corr√©lation entre la colonne "tension" et "cholesterol"
np.corrcoef(df['tension'], df['cholesterol'])

# (w) On peut √©galement utiliser la m√©thode corr de la classe DataFrame pour afficher les corr√©lations entre toutes les diff√©rentes variables num√©riques. Afficher ces corr√©lations.
df.corr()